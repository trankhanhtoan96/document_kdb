{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DevKit DotBMoon","title":"Home"},{"location":"Dictionaries/","text":"Dictionaries are an extension of lists which provide the foundation for creating tables. In mathematical terms, dictionary creates the \u201cdomain \u2192 Range\u201d or in general (short) creates \u201ckey \u2192 value\u201d relationship between elements. A dictionary is an ordered collection of key-value pairs that is roughly equivalent to a hash table. A dictionary is a mapping defined by an explicit I/O association between a domain list and a range list via positional correspondence. The creation of a dictionary uses the \"xkey\" primitive (!) ListOfDomain ! ListOfRange q)d:`Name`Age`Sex`Weight!(`John;36;\"M\";60.3) / Create a dictionary d q)d Name | `John Age | 36 Sex | \"M\" Weight | 60.3 q)count d / To get the number of rows in a dictionary. 4 q)key d / The function key returns the domain `Name`Age`Sex`Weight q)value d / The function value returns the range. `John 36 \"M\" 60.3 q)cols d / The function cols also returns the domain. `Name`Age`Sex`Weight Lookup q)d[`Name] / Accessing the value of domain `Name `John q)d[`Name`Sex] / extended item-wise to a simple list of keys `John \"M\" Operations on Dictionaries modified d:`Name`Age`Sex`Weight! (`John;36;\"M\";60.3) / A dictionary d q)d[`Age]:35 / Assigning new value to key Age q)d / New value assigned to key Age in d Name | `John Age | 35 Sex | \"M\" Weight | 60.3 extended q)d[`Height]:\"182 Ft\" q)d Name | `John Age | 35 Sex | \"M\" Weight | 60.3 Height | \"182 Ft\" Reverse Lookup q)d2:`x`y`z!99 88 77 q)d2?77 `z Removing q)d2:`x`y`z!99 88 77 q)d2 _`z x| 99 y| 88 Column Dictionaries q)scores: `name`id!(`John`Jenny`Jonathan;9 18 27) / Dictionary scores q)scores[`name] / The values for the name column are `John`Jenny`Jonathan q)scores.name / Retrieving the values for a column in a / column dictionary using dot notation. `John`Jenny`Jonathan q)scores[`name][1] / Values in row 1 of the name column `Jenny q)scores[`id][2] / Values in row 2 of the id column is 27 Flipping a Dictionary The net effect of flipping a column dictionary is simply reversing the order of the indices. This is logically equivalent to transposing the rows and columns. q)scores name | John Jenny Jonathan id | 9 18 27 q)flip scores name id --------------- John 9 Jenny 18 Jonathan 27","title":"Dictionaries"},{"location":"Dictionaries/#lookup","text":"q)d[`Name] / Accessing the value of domain `Name `John q)d[`Name`Sex] / extended item-wise to a simple list of keys `John \"M\"","title":"Lookup"},{"location":"Dictionaries/#operations-on-dictionaries","text":"","title":"Operations on Dictionaries"},{"location":"Dictionaries/#modified","text":"d:`Name`Age`Sex`Weight! (`John;36;\"M\";60.3) / A dictionary d q)d[`Age]:35 / Assigning new value to key Age q)d / New value assigned to key Age in d Name | `John Age | 35 Sex | \"M\" Weight | 60.3","title":"modified"},{"location":"Dictionaries/#extended","text":"q)d[`Height]:\"182 Ft\" q)d Name | `John Age | 35 Sex | \"M\" Weight | 60.3 Height | \"182 Ft\"","title":"extended"},{"location":"Dictionaries/#reverse-lookup","text":"q)d2:`x`y`z!99 88 77 q)d2?77 `z","title":"Reverse Lookup"},{"location":"Dictionaries/#removing","text":"q)d2:`x`y`z!99 88 77 q)d2 _`z x| 99 y| 88","title":"Removing"},{"location":"Dictionaries/#column-dictionaries","text":"q)scores: `name`id!(`John`Jenny`Jonathan;9 18 27) / Dictionary scores q)scores[`name] / The values for the name column are `John`Jenny`Jonathan q)scores.name / Retrieving the values for a column in a / column dictionary using dot notation. `John`Jenny`Jonathan q)scores[`name][1] / Values in row 1 of the name column `Jenny q)scores[`id][2] / Values in row 2 of the id column is 27","title":"Column Dictionaries"},{"location":"Dictionaries/#flipping-a-dictionary","text":"The net effect of flipping a column dictionary is simply reversing the order of the indices. This is logically equivalent to transposing the rows and columns. q)scores name | John Jenny Jonathan id | 9 18 27 q)flip scores name id --------------- John 9 Jenny 18 Jonathan 27","title":"Flipping a Dictionary"},{"location":"data_type/","text":"Data Type Name Example boolean 1b byte 0xff short 23h int 23i long 23j real 2.3e float 2.3f char \u201ca\u201d varchar `ab month 2003.03m date 2015.03.17T18:01:40.134 minute 08:31 second 08:31:53 time 18:03:18.521 enum u$ b, where u: a b Date q)x:2015.01.22 / This is how we write 22nd Jan 2015 q)`int$x / Number of days since 2000.01.01 5500i q)x.year / Another way of extracting year 2015i q)x.mm / Another way of extracting month 1i q)x.dd / Another way of extracting day 22i q)x+1 / Add one day 2015.01.23 q)x-7 / Subtract 7 days 2015.01.1 Time q)tt1: 03:30:00.000 / tt1 store the time q)tt1 03:30:00.000 q)`int$tt1 / Number of milliseconds 12600000i q)tt1.hh 3i q)tt1.mm 30i q)tt1.ss 0i Datetimes q)dt:2012.12.20T04:54:59:000 / 04:54.59 AM on 20thDec2012 q)`float$dt 4737.205","title":"Data type"},{"location":"data_type/#data-type","text":"Name Example boolean 1b byte 0xff short 23h int 23i long 23j real 2.3e float 2.3f char \u201ca\u201d varchar `ab month 2003.03m date 2015.03.17T18:01:40.134 minute 08:31 second 08:31:53 time 18:03:18.521 enum u$ b, where u: a b","title":"Data Type"},{"location":"data_type/#date","text":"q)x:2015.01.22 / This is how we write 22nd Jan 2015 q)`int$x / Number of days since 2000.01.01 5500i q)x.year / Another way of extracting year 2015i q)x.mm / Another way of extracting month 1i q)x.dd / Another way of extracting day 22i q)x+1 / Add one day 2015.01.23 q)x-7 / Subtract 7 days 2015.01.1","title":"Date"},{"location":"data_type/#time","text":"q)tt1: 03:30:00.000 / tt1 store the time q)tt1 03:30:00.000 q)`int$tt1 / Number of milliseconds 12600000i q)tt1.hh 3i q)tt1.mm 30i q)tt1.ss 0i","title":"Time"},{"location":"data_type/#datetimes","text":"q)dt:2012.12.20T04:54:59:000 / 04:54.59 AM on 20thDec2012 q)`float$dt 4737.205","title":"Datetimes"},{"location":"install/","text":"link download: https://kx.com/download/ Window ```shell script c:/q / Main q directory c:/q/w32/ / Location of windows 32-bit executable # linux ```shell script ~/q / main q directory (under the user home) ~/q/l32 / location of linux 32-bit executable Mac shell script ~/q / main q directory (under the user home) ~/q/m32 / Location of mac 32-bit executable Starting the q Environment open terminal and run ~/q/m32/q on mac","title":"Installing"},{"location":"install/#window","text":"```shell script c:/q / Main q directory c:/q/w32/ / Location of windows 32-bit executable # linux ```shell script ~/q / main q directory (under the user home) ~/q/l32 / location of linux 32-bit executable","title":"Window"},{"location":"install/#mac","text":"shell script ~/q / main q directory (under the user home) ~/q/m32 / Location of mac 32-bit executable","title":"Mac"},{"location":"install/#starting-the-q-environment","text":"open terminal and run ~/q/m32/q on mac","title":"Starting the q Environment"},{"location":"list/","text":"list (9;8;7) or (\"a\"; \"b\"; \"c\") or (-10.0; 3.1415e; `abcd; \"r\") q)l1:(-10.0;3.1415e;(`abcd;\"r\")) / Assigning variable name to general list q)count l1 / Calculating number of items in the list l1 4 q)symbols:(`Life;`Is;`Beautiful) / Simple Symbols List `Life`Is`Beautiful q)chars:(\"h\";\"e\";\"l\";\"l\";\"o\";\" \";\"w\";\"o\";\"r\";\"l\";\"d\") \"hello world\" indexing of list Index Notation q)L:(99;98.7e;`b;`abc;\"z\") q)L[0] 99 q)L[1] 98.7e q)L[4] \"z\" Indexed Assignment q)L1:9 8 7 q)L1[2]:66 / Indexed assignment into a simple list / enforces strict type matching. q)L1 9 8 66 Lists from Variables q)l1:(9;8;40;200) q)l2:(1 4 3; `abc`xyz) q)l:(l1;l2) / combining the two list l1 and l2 q)l 9 8 40 200 (1 4 3;`abc`xyz) Joining Lists The most common operation on two lists is to join them together to form a larger list. More precisely, the join operator (,) appends its right operand to the end of the left operand and returns the result. It accepts an atom in either argument. q)1,2 3 4 1 2 3 4 q)1 2 3, 4.4 5.6 / If the arguments are not of uniform type, / the result is a general list. 1 2 3 4.4 5.6 Elided Indices q)L:((1 2 3; 4 5 6 7); (`a`b`c;`d`e`f`g;`0`1`2);(\"good\";\"morning\")) q)L (1 2 3;4 5 6 7) (`a`b`c;`d`e`f`g;`0`1`2) (\"good\";\"morning\") /Retrieve all items in the second position of each list at the top level. q)L[;1;] 4 5 6 7 `d`e`f`g \"morning\" /Retrieve the items in the third position for each list at the second level. q)L[;;2] 3 6 `c`f`2 \"or\"","title":"List"},{"location":"list/#list","text":"(9;8;7) or (\"a\"; \"b\"; \"c\") or (-10.0; 3.1415e; `abcd; \"r\") q)l1:(-10.0;3.1415e;(`abcd;\"r\")) / Assigning variable name to general list q)count l1 / Calculating number of items in the list l1 4 q)symbols:(`Life;`Is;`Beautiful) / Simple Symbols List `Life`Is`Beautiful q)chars:(\"h\";\"e\";\"l\";\"l\";\"o\";\" \";\"w\";\"o\";\"r\";\"l\";\"d\") \"hello world\"","title":"list"},{"location":"list/#indexing-of-list","text":"","title":"indexing of list"},{"location":"list/#index-notation","text":"q)L:(99;98.7e;`b;`abc;\"z\") q)L[0] 99 q)L[1] 98.7e q)L[4] \"z\"","title":"Index Notation"},{"location":"list/#indexed-assignment","text":"q)L1:9 8 7 q)L1[2]:66 / Indexed assignment into a simple list / enforces strict type matching. q)L1 9 8 66","title":"Indexed Assignment"},{"location":"list/#lists-from-variables","text":"q)l1:(9;8;40;200) q)l2:(1 4 3; `abc`xyz) q)l:(l1;l2) / combining the two list l1 and l2 q)l 9 8 40 200 (1 4 3;`abc`xyz)","title":"Lists from Variables"},{"location":"list/#joining-lists","text":"The most common operation on two lists is to join them together to form a larger list. More precisely, the join operator (,) appends its right operand to the end of the left operand and returns the result. It accepts an atom in either argument. q)1,2 3 4 1 2 3 4 q)1 2 3, 4.4 5.6 / If the arguments are not of uniform type, / the result is a general list. 1 2 3 4.4 5.6","title":"Joining Lists"},{"location":"list/#elided-indices","text":"q)L:((1 2 3; 4 5 6 7); (`a`b`c;`d`e`f`g;`0`1`2);(\"good\";\"morning\")) q)L (1 2 3;4 5 6 7) (`a`b`c;`d`e`f`g;`0`1`2) (\"good\";\"morning\") /Retrieve all items in the second position of each list at the top level. q)L[;1;] 4 5 6 7 `d`e`f`g \"morning\" /Retrieve the items in the third position for each list at the second level. q)L[;;2] 3 6 `c`f`2 \"or\"","title":"Elided Indices"},{"location":"list_synctax/","text":"Example 1 \u2013 Atom and List Formation / Note that the comments begin with a slash \u201c / \u201d and cause the parser / to ignore everything up to the end of the line. x: `mohan / `mohan is a symbol, assigned to a variable x type x / let\u2019s check the type of x -11h / -ve sign, because it\u2019s single element. y: (`abc;`bca;`cab) / list of three symbols, y is the variable name. type y 11h / +ve sign, as it contain list of atoms (symbol). y1: (`abc`bca`cab) / another way of writing y, please note NO semicolon y2: (`$\"symbols may have interior blanks\") / string to symbol conversion y[0] / return `abc y 0 / same as y[0], also returns `abc y 0 2 / returns `abc`cab, same as does y[0 2] z: (`abc; 10 20 30; (`a`b); 9.9 8.8 7.7) / List of different types, z 2 0 / returns (`a`b; `abc), z[2;0] / return `a. first element of z[2] x: \"Hello World!\" / list of character, a string x 4 0 / returns \u201coH\u201d i.e. 4th and 0th(first) element","title":"List synctax"},{"location":"list_synctax/#example-1-atom-and-list-formation","text":"/ Note that the comments begin with a slash \u201c / \u201d and cause the parser / to ignore everything up to the end of the line. x: `mohan / `mohan is a symbol, assigned to a variable x type x / let\u2019s check the type of x -11h / -ve sign, because it\u2019s single element. y: (`abc;`bca;`cab) / list of three symbols, y is the variable name. type y 11h / +ve sign, as it contain list of atoms (symbol). y1: (`abc`bca`cab) / another way of writing y, please note NO semicolon y2: (`$\"symbols may have interior blanks\") / string to symbol conversion y[0] / return `abc y 0 / same as y[0], also returns `abc y 0 2 / returns `abc`cab, same as does y[0 2] z: (`abc; 10 20 30; (`a`b); 9.9 8.8 7.7) / List of different types, z 2 0 / returns (`a`b; `abc), z[2;0] / return `a. first element of z[2] x: \"Hello World!\" / list of character, a string x 4 0 / returns \u201coH\u201d i.e. 4th and 0th(first) element","title":"Example 1 \u2013 Atom and List Formation"},{"location":"overview/","text":"A kdb+ system contains the following two components: KDB+ \u2212 the database (k database plus) Q \u2212 the programming language for working with kdb+ Both kdb+ and q are written in k programming language (same as q but less readable). Why use KDB+ a single solution for real-time data with analytics. Kdb+ stores database as ordinary native files, so it does not have any special needs regarding hardware and storage architecture. It is worth pointing out that the database is just a set of files, so your administrative work won\u2019t be difficult. Where As the volume of data is increasing day by day, we need a system that can handle huge volumes of data. KDB+ fulfills this requirement. KDB+ not only stores an enormous amount of data but also analyzes it in real time.","title":"Overview"},{"location":"overview/#why-use-kdb","text":"a single solution for real-time data with analytics. Kdb+ stores database as ordinary native files, so it does not have any special needs regarding hardware and storage architecture. It is worth pointing out that the database is just a set of files, so your administrative work won\u2019t be difficult.","title":"Why use KDB+"},{"location":"overview/#where","text":"As the volume of data is increasing day by day, we need a system that can handle huge volumes of data. KDB+ fulfills this requirement. KDB+ not only stores an enormous amount of data but also analyzes it in real time.","title":"Where"},{"location":"type_casting/","text":"Casting Integers to Floats q)a:9 18 27 q)$[`float;a] / Specify desired data type by its symbol name, 1st way 9 18 27f Casting Strings to Symbols q)b: (\"Hello\";\"World\";\"HelloWorld\") / define a list of strings q)c: `$b / this is how to cast strings to symbols q)c / Now c is a list of symbols `Hello`World`HelloWorld Casting Strings to Non-Symbols q)b:900 / b contain single atomic integer q)c:string b / convert this integer atom to string \u201c900\u201d q)c","title":"Type casting"},{"location":"type_casting/#casting-integers-to-floats","text":"q)a:9 18 27 q)$[`float;a] / Specify desired data type by its symbol name, 1st way 9 18 27f","title":"Casting Integers to Floats"},{"location":"type_casting/#casting-strings-to-symbols","text":"q)b: (\"Hello\";\"World\";\"HelloWorld\") / define a list of strings q)c: `$b / this is how to cast strings to symbols q)c / Now c is a list of symbols `Hello`World`HelloWorld","title":"Casting Strings to Symbols"},{"location":"type_casting/#casting-strings-to-non-symbols","text":"q)b:900 / b contain single atomic integer q)c:string b / convert this integer atom to string \u201c900\u201d q)c","title":"Casting Strings to Non-Symbols"}]}